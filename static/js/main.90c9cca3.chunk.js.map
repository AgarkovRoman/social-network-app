{"version":3,"sources":["App.module.css","components/UI/Loader/Loader.module.scss","components/Dialogs/Message/Message.module.css","serviceWorker.js","components/Header/Header.js","api/api.js","redux/auth-reducer.js","components/Header/HeaderContainer.js","components/Navigation/Friends/Friends.js","components/Navigation/Navigation.js","redux/users-reducer.js","components/UI/Loader/Loader.js","components/Users/Pagination.js","components/Users/User.js","components/Users/Users.js","hoc/withAuthRedirect.js","redux/users-selectors.js","components/Users/UsersContainer.js","redux/dialogs-reducer.js","components/Dialogs/Dialog/Dialog.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js","utils/validators.js","components/Profile/ProfileStatus/ProfileStatus.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/MyPosts/Post/Post.js","components/UI/FormsControls/FormsControls.js","components/Profile/MyPosts/MyPosts.js","redux/profile-reducer.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js","components/Login/Login.js","redux/app-reducer.js","redux/redux-store.js","App.js","index.js","components/Navigation/Navigation.module.css","components/Users/Users.module.scss","components/Header/Header.module.css","components/Profile/Profile.module.css","components/UI/FormsControls/FormsControls.module.css","components/Navigation/Friends/Friends.module.css","components/Dialogs/Dialogs.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/userIcon.svg","components/Dialogs/Dialog/Dialog.module.css","components/Profile/MyPosts/Post/Post.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Header","props","className","classes","login","isAuth","link","onClick","logout","to","axiosInstance","axios","baseURL","withCredentials","headers","userAPI","getUsers","currentPage","pageSize","get","then","response","data","getProfile","userId","console","warn","profileAPI","getStatus","updateStatus","status","put","followAPI","followUsers","id","post","unfollowUsers","delete","authAPI","email","password","rememberMe","initialState","setAuthUserData","type","payload","authMe","dispatch","a","resultCode","authReducer","state","action","HeaderContainer","this","React","Component","connect","auth","Friends","img","Navigation","activeClassName","activeLink","users","totalUsersCount","isFetching","isFollowingInProgress","toggleFollowUser","togglePreloaderFetching","toggleFollowingFetching","toggelFollowFlow","APIMethod","usersReducer","map","u","followed","count","filter","Loader","ldsRipple","Pagination","pagesCount","Math","ceil","pages","i","push","p","selectedPage","e","onPageChenged","User","user","Img","src","photos","small","userIcon","alt","disabled","some","unfollow","follow","name","Users","key","mapStateToPropsForRedirect","withAuthRedirect","RedirectComponent","getAllUsers","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getisFetching","getisFollowingInProgress","UsersContainer","pageNumber","setCurrentPage","compose","items","totalCount","bind","DialogsData","MessegesData","message","dialogsReducer","newMessage","newMessageText","Dialog","path","dialog","Message","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","Dialogs","dialogsPage","dialogsData","messegesData","dialogsElements","arr","index","messegesElements","obj","createRef","dialogsItems","messagesItems","values","sendMessage","mapStateToProps","mapDispatchToProps","addMessageActionCreator","maxLength","ProfileStatus","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","currentTarget","value","autoFocus","onBlur","ProfileInfo","profile","coverImage","avatar","large","userName","Post","required","undefined","InputType","input","meta","hasError","touched","error","types","maxLengt200","length","AddPostreduxForm","validate","MyPosts","Posts","postdata","postText","addPost","newPostText","PostsData","profileReducer","newPost","postId","newText","MyPostsContainer","profilePage","addPostActionCreator","Profile","ProfileContainer","params","authorizedUserId","withRouter","LoginReduxForm","autocomplete","formError","messeges","stopSubmit","_error","formData","initialized","appReducer","reducers","combineReducers","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","App","initializeApp","appWrapper","render","DialogsContainer","AppContainer","MainApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.90c9cca3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3rnam\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRipple\":\"Loader_ldsRipple__3Cruc\",\"lds-ripple\":\"Loader_lds-ripple__20g5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport classes from './Header.module.css';\nimport { NavLink } from 'react-router-dom';\n\nconst Header = (props) => {\n    return (\n        <header className={classes.Header}>\n            <div className={classes.login}>\n                {props.isAuth\n                    ? <div className={classes.link}>{props.login} - <button onClick={props.logout}>Log out</button></div>\n                    : <NavLink className={classes.link} to={'/login'}>Log in</NavLink>\n                }\n            </div>\n        </header>\n    )\n}\n\nexport default Header","import * as axios from 'axios'\n\nconst axiosInstance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'c01eb349-ca08-458d-ae9f-fcf16b45f5fc'\n    }\n})\n\nexport const userAPI = {\n    getUsers(currentPage = 1, pageSize = 10) {\n        return axiosInstance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => {\n                return response.data\n            })\n    },\n    getProfile(userId) {\n        console.warn('Old method. Please use profileAPI')\n        return profileAPI.getProfile(userId)\n    }\n}\n\nexport const profileAPI = {\n    getProfile(userId) {\n        return axiosInstance.get(`profile/${userId}`)\n    },\n    getStatus(userId) {\n        return axiosInstance.get(`profile/status/${userId}`)\n    },\n    updateStatus(status) {\n        return axiosInstance.put(`profile/status`, { status })\n    }\n}\n\nexport const followAPI = {\n    followUsers(id) {\n        return axiosInstance.post(`follow/${id}`)\n            .then(response => {\n                return response.data\n            })\n    },\n    unfollowUsers(id) {\n        return axiosInstance.delete(`follow/${id}`)\n            .then(response => {\n                return response.data\n            })\n    }\n}\n\nexport const authAPI = {\n    getAuthMe() {\n        return axiosInstance.get(`auth/me`)\n            .then(response => {\n                return response.data\n            })\n    },\n    login(email, password, rememberMe = false) {\n        return axiosInstance.post(`auth/login`, { email, password, rememberMe })\n    },\n    logout() {\n        return axiosInstance.delete(`auth/login`)\n    }\n}\n\n","import { authAPI } from '../api/api'\nimport { stopSubmit } from 'redux-form'\n\nconst SET_USER_DATA = 'auth/SET_USER_DATA'\n\nlet initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n    type: SET_USER_DATA, payload: { userId, email, login, isAuth }\n})\n\nexport const authMe = () => async (dispatch) => {\n    let response = await authAPI.getAuthMe();\n    if (response.resultCode === 0) {\n        let { id, login, email } = response.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe);\n    if (response.resultCode === 0) {\n        dispatch(authMe());\n    } else {\n        let message = response.messeges.length > 0 ? response.messeges[0] : 'some error'\n        dispatch(stopSubmit('login', { _error: message }));\n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout();\n    if (response.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;","import React from 'react'\nimport Header from './Header'\nimport { connect } from 'react-redux'\nimport { logout } from '../../redux/auth-reducer'\n\nclass HeaderContainer extends React.Component {\n\n\n    render() {\n        return <Header {...this.props} />\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n})\n\nexport default connect(mapStateToProps, { logout })(HeaderContainer);","import React from \"react\";\nimport classes from \"../Friends/Friends.module.css\";\n\nconst Friends = () => {\n    return (\n        <div className={classes.Friends}>\n            <h4>Friends</h4>\n            <div className={classes.img}></div>\n            <p>Katya</p>\n            <div className={classes.img}></div>\n            <p>Zhenya</p>\n        </div>\n\n    )\n}\nexport default Friends;\n","import React from \"react\";\nimport classes from \"./Navigation.module.css\"\nimport { NavLink } from \"react-router-dom\";\nimport Friends from \"./Friends/Friends\";\n\nconst Navigation = () => {\n    return (\n        <>\n            <nav className={classes.Navigation}>\n                <ul>\n                    <li><NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink></li>\n                    <li><NavLink to=\"/dialogs\" activeClassName={classes.activeLink}>Dialogs</NavLink></li>\n                    <li><NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink></li>\n                    <li><NavLink to=\"/news\" activeClassName={classes.activeLink}>News</NavLink></li>\n                    <li><NavLink to=\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink></li>\n                    <li><Friends /></li>\n                </ul>\n            </nav>\n        </>\n    )\n}\nexport default Navigation;\n","import { userAPI, followAPI } from '../api/api'\n\nconst TOGGLE_FOLLOW = 'TOGGLE-FOLLOW';\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\nconst TOGGLE_PRELOADER_FETCHING = 'TOGGLE-PRELOADER-FETCHING';\nconst TOGGLE_FOLLOWING_FETCHING = 'TOGGLE_FOLLOWING_FETCHING';\n\nlet initialState = {\n    users: [],\n    pageSize: 6,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    isFollowingInProgress: [],\n};\n\nconst usersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case TOGGLE_FOLLOW: {\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: !u.followed }\n                    }\n                    return u;\n                }),\n            }\n        }\n        case SET_USERS: {\n            return {\n                ...state,\n                users: action.users\n            }\n        }\n        case SET_CURRENT_PAGE: {\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return {\n                ...state,\n                totalUsersCount: action.count\n            }\n        }\n        case TOGGLE_PRELOADER_FETCHING: {\n            return {\n                ...state,\n                isFetching: action.isFetching,\n            }\n        }\n        case TOGGLE_FOLLOWING_FETCHING: {\n            return {\n                ...state,\n                isFollowingInProgress:\n                    action.isFollowingInProgress\n                        ? [...state.isFollowingInProgress, action.userId]\n                        : state.isFollowingInProgress.filter(id => id !== action.userId),\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const toggleFollowUser = (userId) => {\n    return {\n        type: TOGGLE_FOLLOW,\n        userId,\n    }\n}\n\nexport const setUsers = (users) => {\n    return {\n        type: SET_USERS,\n        users,\n    }\n}\n\nexport const setCurrentPage = (currentPage) => {\n    return {\n        type: SET_CURRENT_PAGE,\n        currentPage,\n    }\n}\n\nexport const setTotalUsersCount = (totalUsersCount) => {\n    return {\n        type: SET_TOTAL_USERS_COUNT,\n        count: totalUsersCount,\n    }\n}\n\nexport const togglePreloaderFetching = (isFetching) => {\n    return {\n        type: TOGGLE_PRELOADER_FETCHING,\n        isFetching,\n    }\n}\n\nexport const toggleFollowingFetching = (isFollowingInProgress, userId) => {\n    return {\n        type: TOGGLE_FOLLOWING_FETCHING,\n        isFollowingInProgress,\n        userId,\n    }\n}\n\nexport const getUsers = (currentPage, pageSize) => async (dispatch) => {\n    dispatch(togglePreloaderFetching(true));\n\n    let response = await userAPI.getUsers(currentPage, pageSize);\n    dispatch(togglePreloaderFetching(false));\n    dispatch(setUsers(response.items));\n    dispatch(setTotalUsersCount(response.totalCount));\n}\n\n\nconst toggelFollowFlow = async (dispatch, id, APIMethod) => {\n\n    dispatch(toggleFollowingFetching(true, id))\n    let response = await APIMethod(id)\n    if (response.resultCode === 0) {\n        dispatch(toggleFollowUser(id));\n    }\n    dispatch(toggleFollowingFetching(false, id));\n}\n\nexport const follow = (id) => async (dispatch) => {\n    let APIMethod = followAPI.followUsers.bind(userAPI);\n    toggelFollowFlow(dispatch, id, APIMethod);\n}\n\nexport const unfollow = (id) => async (dispatch) => {\n    let APIMethod = followAPI.unfollowUsers.bind(userAPI);\n    toggelFollowFlow(dispatch, id, APIMethod);\n}\n\nexport default usersReducer;","import React from 'react';\nimport classes from './Loader.module.scss';\n\nconst Loader = () => {\n    return (\n        <div className={classes.ldsRipple}>\n            <div>\n            </div>\n            <div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Loader;","import React from 'react';\nimport classes from './Users.module.scss';\n\nconst Pagination = (props) => {\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\n    let pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    return <div>\n        {pages.map(p => {\n            return <span className={props.currentPage === p && classes.selectedPage}\n                onClick={(e) => { props.onPageChenged(p) }}\n            >{p}</span>\n        })}\n    </div>\n}\n\nexport default Pagination","import React from 'react';\nimport classes from './Users.module.scss';\nimport userIcon from '../../assets/images/userIcon.svg';\nimport { NavLink } from 'react-router-dom';\n\nlet User = ({ user, ...props }) => {\n    return <div>\n        <span>\n            <NavLink to={`/profile/${user.id}`}>\n                <img className={classes.Img} src={user.photos.small !== null ? user.photos.small : userIcon} alt='' />\n            </NavLink>\n        </span>\n        <span>\n            {user.followed\n                ? <button disabled={props.isFollowingInProgress.some(id => id === user.id)} onClick={() => { props.unfollow(user.id) }} >Unfollow</button>\n                : <button disabled={props.isFollowingInProgress.some(id => id === user.id)} onClick={() => { props.follow(user.id) }}   >Follow</button>\n            }\n        </span>\n        <span>\n            <span>\n                <div>{user.name}</div><div>{user.status}</div>\n            </span>\n            <span>\n                {/* <div>{user.location.country}</div><div>{user.location.city}</div> */}\n            </span>\n        </span>\n    </div>\n\n}\n\nexport default User","import React from 'react';\nimport classes from './Users.module.scss';\nimport userIcon from '../../assets/images/userIcon.svg';\nimport Loader from '../UI/Loader/Loader'\nimport { NavLink } from 'react-router-dom';\nimport Pagination from './Pagination';\nimport User from './User';\n\nlet Users = (props) => {\n\n    return <div className={classes.Users} >\n\n        {props.isFetching ? <Loader /> : null}\n\n\n        <Pagination\n            totalUsersCount={props.totalUsersCount}\n            pageSize={props.pageSize}\n            onPageChenged={props.onPageChenged}\n        />\n\n\n        {\n            props.users.map(u => <User\n                user={u}\n                key={u.id}\n                toggleFollowUser={props.toggleFollowUser}\n                isFollowingInProgress={props.isFollowingInProgress}\n                follow={props.follow}\n                unfollow={props.unfollow}\n            />\n            )\n        }\n    </div >\n}\n\nexport default Users","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux';\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\n            return <Component {...this.props} />\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n\n    return ConnectedAuthRedirectComponent;\n} ","export const getAllUsers = (state) => {\n    return state.usersPage.users\n}\n\nexport const getPageSize = (state) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state) => {\n    return state.usersPage.currentPage\n}\n\nexport const getisFetching = (state) => {\n    return state.usersPage.isFetching\n}\n\nexport const getisFollowingInProgress = (state) => {\n    return state.usersPage.isFollowingInProgress\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleFollowUser, setCurrentPage, togglePreloaderFetching, toggleFollowingFetching, getUsers, follow, unfollow } from \"../../redux/users-reducer\";\nimport Users from './Users'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\nimport { getAllUsers, getPageSize, getTotalUsersCount, getCurrentPage, getisFetching, getisFollowingInProgress } from '../../redux/users-selectors'\n\nclass UsersContainer extends React.Component {\n\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\n    }\n\n    onPageChenged = (pageNumber) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.getUsers(pageNumber, this.props.pageSize);\n    }\n\n    render() {\n        return (\n            <>\n                < Users\n                    totalUsersCount={this.props.totalUsersCount}\n                    pageSize={this.props.pageSize}\n                    currentPage={this.props.currentPage}\n                    onPageChenged={this.onPageChenged}\n                    users={this.props.users}\n                    toggleFollowUser={this.props.toggleFollowUser}\n                    isFetching={this.props.isFetching}\n\n                    isFollowingInProgress={this.props.isFollowingInProgress}\n\n                    follow={this.props.follow}\n                    unfollow={this.props.unfollow}\n                />\n            </>\n        )\n    }\n}\n\n// let mapStateToProps = (state) => {\n\n//     return {\n//         users: state.usersPage.users,\n//         pageSize: state.usersPage.pageSize,\n//         totalUsersCount: state.usersPage.totalUsersCount,\n//         currentPage: state.usersPage.currentPage,\n//         isFetching: state.usersPage.isFetching,\n\n//         isFollowingInProgress: state.usersPage.isFollowingInProgress\n//     }\n// }\n\nlet mapStateToProps = (state) => {\n    return {\n        users: getAllUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getisFetching(state),\n        isFollowingInProgress: getisFollowingInProgress(state),\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, {\n        toggleFollowUser,\n        setCurrentPage,\n        togglePreloaderFetching,\n        toggleFollowingFetching,\n        getUsers,\n        follow,\n        unfollow,\n    })\n)(UsersContainer)","const ADD_MESSAGE = 'ADD-MESSAGE';\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\n\nlet initialState = {\n    DialogsData: [\n        { id: 1, name: 'Katya Shilo' },\n        { id: 2, name: 'Semen Agarkov' },\n        { id: 3, name: 'Zhenya Ivanov' },\n    ],\n    MessegesData: [\n        { id: 1, message: 'Hello!' },\n        { id: 2, message: 'How are you doing?' },\n        { id: 3, message: 'Hi!' },\n        { id: 4, message: 'I am good!' },\n        { id: 5, message: 'I am good!' },\n        { id: 6, message: 'I am xfdscd!' },\n    ],\n};\n\nconst dialogsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_MESSAGE: {\n            let newMessage = {\n                id: 7,\n                message: action.newMessageText,\n            };\n            return {\n                ...state,\n                MessegesData: [...state.MessegesData, newMessage],\n\n            }\n        }\n        // case UPDATE_NEW_MESSAGE_TEXT: {\n        //     return {\n        //         ...state,\n        //         newMessageText: action.newMessage,\n        //     };\n        // }\n        default:\n            return state;\n    }\n\n}\n\nexport const addMessageActionCreator = (newMessageText) => {\n    return {\n        type: ADD_MESSAGE,\n        newMessageText\n    }\n}\n\n// export const updateNewMessageTextActionCreator = (messageText) => {\n//     return {\n//         type: UPDATE_NEW_MESSAGE_TEXT,\n//         newMessage: messageText,\n//     }\n// }\n\nexport default dialogsReducer;","import React from \"react\";\nimport classes from './Dialog.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst Dialog = (props) => {\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div className={classes.dialog}>\n            <div className={classes.img}></div>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default Dialog;\n","import React from \"react\";\nimport classes from \"./Message.module.css\";\n\nconst Message = (props) => {\n    return (\n        <div className={classes.message}>{props.message}</div>\n\n    )\n}\n\nexport default Message;\n","import React from \"react\";\nimport classes from './Dialogs.module.css'\nimport Dialog from \"./Dialog/Dialog\";\nimport Message from \"./Message/Message\";\nimport { Field, reduxForm } from 'redux-form'\n// import { Redirect } from 'react-router-dom';\n\nconst Dialogs = (props) => {\n    let state = props.dialogsPage;\n\n    let dialogsData = state.DialogsData;\n    let messegesData = state.MessegesData;\n\n    let dialogsElements = dialogsData.map((arr, index) => {\n        return (\n            <Dialog\n                key={arr.id}\n                name={arr.name}\n                id={arr.id}\n            />\n        )\n    });\n\n    let messegesElements = messegesData.map((obj, index) => {\n        return (\n            <Message\n                key={obj.id}\n                message={obj.message}\n            />\n        )\n    });\n\n    let newMessageElement = React.createRef()\n\n    let addMessage = (values) => {\n        // newMessageElement.current.value = '';\n        props.sendMessage(values.newMessageText);\n    }\n\n    // if (!props.isAuth) return <Redirect to={'/login'} />;\n\n    return (\n        <div className={classes.Dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={classes.messagesItems}>\n                {messegesElements}\n                <hr />\n                <AddMessageReduxForm onSubmit={addMessage} />\n            </div>\n        </div>\n    )\n}\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component='textarea' name='newMessageText' placeholder='Enter your message'>\n                {/* <textarea\n                    ref={newMessageElement}\n                    placeholder=\"Write a message\"\n                    value={props.newMessageText}\n                    onChange={onChangeMessage}\n                /> */}\n            </Field>\n            <div>\n                <button\n                // onClick={addMessage}\n                >Send\n            </button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)\n\n\nexport default Dialogs;","import React from 'react'\nimport { addMessageActionCreator, updateNewMessageTextActionCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs from './Dialogs'\nimport { connect } from \"react-redux\";\nimport Dialog from \"./Dialog/Dialog\";\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageText) => {\n            dispatch(addMessageActionCreator(newMessageText));\n        },\n        // updateNewMessage: (messageText) => {\n        //     dispatch(updateNewMessageTextActionCreator(messageText));\n        // },\n    }\n}\n\ncompose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\n\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);\n","export const required = value => {\n    return value ? undefined : 'Field is required'\n}\n\nexport const maxLengtCreator = (maxLength) => (value) => {\n    return value && value.length > maxLength ? `Max symbols is ${maxLength}` : undefined\n}","import React, { useState, useEffect } from 'react';\n\nconst ProfileStatus = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || 'Статус'}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status} />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatus","import React from \"react\";\nimport classes from \"./ProfileInfo.module.css\"\nimport Loader from \"../../UI/Loader/Loader\"\nimport ProfileStatus from '../ProfileStatus/ProfileStatus'\n\nconst ProfileInfo = (props) => {\n\n    if (!props.profile) {\n        return <Loader />\n    }\n    return (\n        <div className={classes.coverImage}>\n            {/* <img src={\"https://scontent.fhel5-1.fna.fbcdn.net/v/t1.0-9/c0.624.1536.569a/40551596_1016535835174945_7455686415490220032_o.jpg?_nc_cat=107&_nc_sid=dd9801&_nc_ohc=5StMyIiujeUAX-F2ASM&_nc_ht=scontent.fhel5-1.fna&oh=89f98c009c8afa5d049f333d2d9f8f13&oe=5EE964B7\"} alt=' cover' /> */}\n            <div className={classes.avatar}>\n                {/* <img src='https://scontent.fhel5-1.fna.fbcdn.net/v/t1.0-1/p320x320/90357812_1439202346241623_4493627494993231872_o.jpg?_nc_cat=108&_nc_sid=dbb9e7&_nc_ohc=4CJ5LjGpB0QAX9rl4ir&_nc_ht=scontent.fhel5-1.fna&_nc_tp=6&oh=e25c3e266cccbe145e75aa6a068e457c&oe=5EE970E2' /> */}\n                <img src={props.profile.photos.large} alt='' />\n            </div>\n            <div className={classes.userName}>\n                <h2>Agarkov Roman</h2>\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus} />\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport classes from \"./Post.module.css\";\n\nconst Post = (props) => {\n    return (\n        <div className={classes.Post}>\n            <div className={classes.img}></div>\n            <div>\n                <h5>Имя Автора</h5>\n                <p>{props.message}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react'\nimport classes from './FormsControls.module.css'\n\n\nexport const InputType = ({ input, meta, ...props }) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={hasError ? classes.error : null}>\n            <div>\n                {props.types === 'input' ? <input {...input} {...props} /> : <textarea {...input} {...props} />}\n            </div>\n            {hasError ? <span> {meta.error}</span> : null}\n        </div>\n    )\n}","import React from \"react\";\nimport Post from './Post/Post'\nimport { Field, reduxForm } from 'redux-form'\nimport { required, maxLengtCreator } from '../../../utils/validators'\nimport { InputType } from '../../UI/FormsControls/FormsControls'\n\n\nconst maxLengt200 = maxLengtCreator(200);\n\nconst MyPosts = (props) => {\n    let PostsData = props.postdata;\n\n    let Posts = PostsData.map(obj => {\n        return (\n            <Post message={obj.postText} />\n        )\n    });\n\n    // let newPostElement = React.createRef()\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);\n    }\n\n    // let onPostChange = () => {\n    //     let postText = newPostElement.current.value;\n    //     props.updateNewPostText(postText);\n    // }\n\n    return (\n        <>\n            <h3>My posts</h3>\n            <AddPostreduxForm onSubmit={onAddPost} />\n            {Posts}\n        </>\n    )\n}\n\nconst AddPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                component={InputType}\n                name='newPostText'\n                placeholder='Write your post'\n                validate={[required, maxLengt200]}\n            >\n                {/* // ref={newPostElement}\n            // onChange={onPostChange}\n            // value={props.newPostText}\n            /> */}\n            </Field>\n            <div>\n                <button\n                // onClick={onAddPost}\n                >Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddPostreduxForm = reduxForm({ form: 'addPostForm' })(AddPostForm)\n\nexport default MyPosts;\n","import { userAPI, profileAPI } from '../api/api'\n\nconst ADD_POST = 'ADD-POST';\nconst DELETE_POST = 'DELETE_POST'\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\n\nconst SET_STATUS = 'SET_STATUS';\n\nlet initialState = {\n    PostsData: [\n        { id: 1, postText: 'This is my post' },\n        { id: 2, postText: 'I am learning React' },\n    ],\n    newPostText: '',\n    profile: null,\n    status: '',\n};\n\nconst profileReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_POST: {\n            let newPost = {\n                id: 5,\n                postText: action.newPostText,\n            };\n\n            return {\n                ...state,\n                PostsData: [...state.PostsData, newPost],\n            }\n        }\n        case DELETE_POST: {\n            return {\n                ...state,\n                PostsData: state.PostsData.filter(p => p.id !== action.postId)\n            }\n        }\n        case UPDATE_NEW_POST_TEXT: {\n            return {\n                ...state,\n                newPostText: action.newText\n            }\n        }\n        case SET_USER_PROFILE: {\n            return {\n                ...state,\n                profile: action.profile,\n            }\n        }\n        case SET_STATUS: {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const addPostActionCreator = (newPostText) => {\n    return {\n        type: ADD_POST,\n        newPostText\n    }\n}\n\nexport const deletePostActionCreator = (postId) => {\n    return {\n        type: DELETE_POST,\n        postId\n    }\n}\n\n// export const updateNewPostTextActionCreator = (postText) => {\n//     return {\n//         type: UPDATE_NEW_POST_TEXT,\n//         newText: postText,\n//     }\n// }\n\nexport const setUserProfile = (profile) => {\n    return {\n        type: SET_USER_PROFILE,\n        profile,\n    }\n}\n\nexport const setStatus = (status) => {\n    return {\n        type: SET_STATUS,\n        status,\n    }\n}\n\nexport const getProfile = (userId) => async (dispatch) => {\n    let response = await userAPI.getProfile(userId);\n    dispatch(setUserProfile(response.data));\n}\n\nexport const getStatus = (userId) => async (dispatch) => {\n    let response = await profileAPI.getStatus(userId);\n    dispatch(setStatus(response.data));\n}\n\nexport const updateStatus = (userId) => async (dispatch) => {\n    let response = await profileAPI.updateStatus(userId);\n    if (response.data.resultCode === 0) {\n        dispatch(setStatus(response.data));\n    }\n}\n\nexport default profileReducer;","import React from \"react\";\nimport MyPosts from \"./MyPosts\"\nimport { addPostActionCreator, updateNewPostTextActionCreator } from \"../../../redux/profile-reducer\";\nimport { connect } from \"react-redux\";\n\n\n// const MyPostsContainer = (props) => {\n\n// let state = props.store.getState();\n\n// let addPost = () => {\n//     props.store.dispatch(addPostActionCreator())\n// }\n\n// let onPostChange = (postText) => {\n//     props.store.dispatch(updateNewPostTextActionCreator(postText));\n// }\n\n// return (\n//     <MyPosts\n//         updateNewPostText={onPostChange}\n//         addPost={addPost}\n\n//     />\n// )\n// }\n/////////\n\nlet mapStateToProps = (state) => {\n    return {\n        postdata: state.profilePage.PostsData,\n        newPostText: state.profilePage.newPostText,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText))\n        },\n        // updateNewPostText: (postText) => {\n        //     dispatch(updateNewPostTextActionCreator(postText))\n        // }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React from \"react\";\nimport classes from \"./Profile.module.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\nconst Profile = (props) => {\n    // debugger\n    return (\n        <div className={classes.Profile}>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <MyPostsContainer />\n        </div>\n    )\n}\nexport default Profile;\n","import React from \"react\";\nimport classes from './Profile.module.css';\nimport Profile from \"./Profile\";\nimport { connect } from 'react-redux';\nimport { getProfile, getStatus, updateStatus } from '../../redux/profile-reducer'\nimport { withRouter } from \"react-router-dom\";\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n        }\n\n        this.props.getProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    render() {\n\n        return (\n            <div className={classes.Profile}>\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n});\n\n\nexport default compose(\n    connect(mapStateToProps, { getProfile, getStatus, updateStatus }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Field, reduxForm } from 'redux-form'\nimport { InputType } from '../UI/FormsControls/FormsControls'\nimport { required } from '../../utils/validators'\nimport { connect } from 'react-redux'\nimport { login } from '../../redux/auth-reducer'\nimport classes from '../UI/FormsControls/FormsControls.module.css'\n\nconst LoginForm = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field\n                placeholder={'email'}\n                name={'email'}\n                component={InputType}\n                validate={[required]}\n                types=\"input\"\n                autocomplete=\"on\"\n            />\n        </div>\n        <div>\n            <Field\n                placeholder={'password'}\n                name={'password'}\n                type={'password'}\n                component={InputType}\n                validate={[required]}\n                types=\"input\"\n                autocomplete=\"on\"\n            />\n        </div>\n        <div>\n            <Field\n                type={'checkbox'}\n                name={'rememberMe'}\n                component={InputType}\n                validate={[required]}\n                types=\"input\"\n            />remember me\n        </div>\n        {props.error && <div className={classes.formError}>\n            {props.error}\n        </div>\n        }\n        <button>Login</button>\n    </form>\n}\n\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\n\nconst Login = (props) => {\n    debugger\n    const onSubmit = (formData) => {\n        props.login(formData.email, formData.password, formData.rememberMe)\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={'/profile'} />\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} />\n    </div>\n}\n\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport default connect(mapStateToProps, { login })(Login); ","import { authAPI } from '../api/api'\nimport { stopSubmit } from 'redux-form'\nimport { authMe } from './auth-reducer'\n\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\n\nlet initialState = {\n    initialized: false,\n}\n\nconst appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n            return {\n                ...state,\n                initialized: true,\n            }\n        default:\n            return state\n    }\n}\n\nexport const InitializedSuccess = () => ({ type: INITIALIZED_SUCCESS })\n\nexport const initializeApp = () => (dispatch) => {\n    let promise = dispatch(authMe());\n\n    promise.then(() => {\n        dispatch(InitializedSuccess());\n    })\n}\n\n\nexport default appReducer;","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./app-reducer\";\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n});\n\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nexport default store;\n\n","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport Login from './components/Login/Login';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/app-reducer';\nimport Loader from './components/UI/Loader/Loader';\n\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport { Provider } from \"react-redux\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  render() {\n\n    if (!this.props.initialized) {\n      return <Loader />\n    }\n\n    return (\n      <div className={classes.appWrapper} >\n        <HeaderContainer />\n        <Navigation />\n        <Switch>\n          <Route path='/dialogs'\n            render={() => <DialogsContainer />}\n          />\n          <Route path='/profile/:userId?'\n            render={() => <ProfileContainer />}\n          />\n          <Route path='/users'\n            render={() => <UsersContainer />}\n          />\n          <Route path='/login'\n            render={() => <Login />}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  initialized: state.app.initialized\n})\n\nconst AppContainer = compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp }))(App);\n\nconst MainApp = (props) => {\n  return <BrowserRouter>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default MainApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport MainApp from './App';\n\n\nReactDOM.render(\n    // <React.StrictMode>\n    <MainApp />,\n    // </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navigation\":\"Navigation_Navigation__1tTPb\",\"activeLink\":\"Navigation_activeLink__2rUFB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Users\":\"Users_Users__1nJFP\",\"selectedPage\":\"Users_selectedPage__16HiA\",\"Img\":\"Users_Img__3lSlG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2C_Ub\",\"login\":\"Header_login__3V3Qa\",\"link\":\"Header_link__2wI74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__3HF8E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__XUNxs\",\"formError\":\"FormsControls_formError__3zSk0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Friends\":\"Friends_Friends__1iUx4\",\"img\":\"Friends_img__33e9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__1HvdP\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"messagesItems\":\"Dialogs_messagesItems__2eejk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"coverImage\":\"ProfileInfo_coverImage__2-DBJ\",\"avatar\":\"ProfileInfo_avatar__3xuFq\",\"userName\":\"ProfileInfo_userName__2XnM7\"};","module.exports = __webpack_public_path__ + \"static/media/userIcon.17b4cea8.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__1323i\",\"img\":\"Dialog_img__3CqbM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__21Kh8\",\"img\":\"Post_img__38ehp\"};"],"sourceRoot":""}